Basic Installation
==================

	1. Read the README, strongly recommended

	2. ./configure

	3. make

	4. make install

If you obtained the source via cvs then an additional step is required:

	1a. ./autogen.sh

If you get errors any of the above stages, 3 especially, then make sure you're
doing everything right, ie. you have the necessary packages/permissions. If
you are still having problems then feel free to contact the authors.

You can contact us via http://insomniac.ath.cx:81/~bluefyre/

Configure Options
=================

At the moment, there are really only 2 important configure options.

	--enable-debug
		This enables all the debugging features of fake64. Without it,
		you will probably have a slightly faster version of fake64, but
		you miss out on all the fun of debugging information.

	--enable-notinstalled
		This causes changes to the way fake64 searches for it's modules
		when it starts and is covered in more detail in the section
		Installation Information just below

Installation Information
========================

Fake64 creates a directory for itself called fake64, in the directory specified
as the prefix to configure, which is normally /usr/local/. Inside this, it
creates /usr/local/fake64/bin and /usr/local/fake64/plugins, which are used to
store binaries and plugins respectively.

A copy of the distributed fake64rc is copied to /etc/fake64rc, and a symlink is
made from /usr/local/bin/fake64 to /usr/local/fake64/bin/romloader. Once this
is done, fake64 should be able to find everything it needs and you should be
able to run it by typing fake64 at the command prompt (assuming /usr/local/bin
is in your PATH).

An alternative option for installation is to use --enable-notinstalled. This
causes the romloader to search for the directory of plugins in the current
directory when run.

This means you have to run the romloader from the source directory, but it has
advantages too. For developers it means you don't need to make install every
time you change something. Also, if you don't have root access to the machine
on which you are compiling fake64, this makes it possible to use it anyway.

You can avoid the whole paths issue entirely by adding your modules to your
~/.fake64rc, then you can run the loader from anywhere and it should behave
normally.
